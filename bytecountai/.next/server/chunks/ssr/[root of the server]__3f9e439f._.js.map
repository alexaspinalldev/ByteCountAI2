{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///Users/Alex/Documents/VSCode/bytecountai/bytecountai/src/app/ai/route.ts"],"sourcesContent":["import { GoogleGenAI } from \"@google/genai\";\n\nconst GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;\nconst ai = new GoogleGenAI({ apiKey: GOOGLE_API_KEY });\n\nexport async function POST(input: string) {\n    const req = `1. Follow these instructions to the absolute letter.\n2. For the given food item, provide the following information in a consistent, structured format:\n- Label: A concise but specific, common name for the food.\n- Calories (kcal): An estimated calorie count for the specifies quantity, or if unspecified a standard serving size.\n- Certainty Score (0-1):** A score indicating how certain you are that the calorie result is accurate.\n    --   1 indicates a highly specific description (e.g., '100g Tesco air-fried skinless chicken breast' or '1 slice Hovis Wholemeal Thick Sliced Bread').\n    --   ~0.8 indicates a good description with brand (e.g., '100g Tesco chicken breast' or '1 slice Hovis brown bread').\n    --   ~0.6 indicates a good description with quantity but no brand (e.g., '100g chicken breast' or '1 slice of brown bread').\n    --   ~0.5 indicates a vague description with quantity (e.g., '100g chicken' or '1 slice of bread').\n    --   ~0.1 indicates a vague description with no quantity or brand (e.g., 'Chicken' or \"Bread)\n    --   0 indicates a result that is totally impossible to analyse (e.g., 'Food').\n4. Return \"{ invalid }\" for non-foodstuff.\n5. Do not include any additional text or explanations in the response, and do not add styling or markdown to the response.\n6. Use the following JSON format for the response. Note label is a string, calories is an integer, and certainty is a decimal:\n\"{\"label\": \"[Label]\", \"calories\": [Calories], \"certainty\": [Certainty Score]}\"\n\nFood Item: ${input}`;\n    // TODO: expand to include other macronutrients, and add advanced mode to frontend\n    // TODO: Need to ensure debouncing is in place for API calls\n    try {\n        const response = await ai.models.generateContent({\n            model: \"gemini-2.0-flash\",\n            contents: [\n                {\n                    role: \"user\",\n                    parts: [{ text: req }]\n                }\n            ],\n            config: {\n                temperature: 0.0\n            }\n        });\n\n        // Extract text from response\n        const data = response?.candidates?.[0]?.content?.parts?.[0]?.text ?? \"\";\n        const output = JSON.parse(data);\n        // console.log(output);\n        return output;\n    } catch (error) {\n        console.error(\"Error generating content:\", error);\n        console.log(\"Trying alternative model...\");\n        // Fallback to the alternative model\n        try {\n            const response = await ai.models.generateContent({\n                model: \"gemini-1.5-flash\",\n                contents: [\n                    {\n                        role: \"user\",\n                        parts: [{ text: req }]\n                    }\n                ],\n                config: {\n                    temperature: 0.0\n                }\n            });\n\n            // Extract text from response\n            const data = response?.candidates?.[0]?.content?.parts?.[0]?.text ?? \"\";\n            const output = JSON.parse(data);\n            // console.log(output);\n            return output;\n        } catch (error) {\n            console.error(\"Error generating content:\", error);\n            return \"{ error }\";\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;AACjD,MAAM,KAAK,IAAI,0JAAA,CAAA,cAAW,CAAC;IAAE,QAAQ;AAAe;AAE7C,eAAe,KAAK,KAAa;IACpC,MAAM,MAAM,CAAC;;;;;;;;;;;;;;;;WAgBN,EAAE,OAAO;IAChB,kFAAkF;IAClF,4DAA4D;IAC5D,IAAI;QACA,MAAM,WAAW,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC;YAC7C,OAAO;YACP,UAAU;gBACN;oBACI,MAAM;oBACN,OAAO;wBAAC;4BAAE,MAAM;wBAAI;qBAAE;gBAC1B;aACH;YACD,QAAQ;gBACJ,aAAa;YACjB;QACJ;QAEA,6BAA6B;QAC7B,MAAM,OAAO,UAAU,YAAY,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;QACrE,MAAM,SAAS,KAAK,KAAK,CAAC;QAC1B,uBAAuB;QACvB,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,6BAA6B;QAC3C,QAAQ,GAAG,CAAC;QACZ,oCAAoC;QACpC,IAAI;YACA,MAAM,WAAW,MAAM,GAAG,MAAM,CAAC,eAAe,CAAC;gBAC7C,OAAO;gBACP,UAAU;oBACN;wBACI,MAAM;wBACN,OAAO;4BAAC;gCAAE,MAAM;4BAAI;yBAAE;oBAC1B;iBACH;gBACD,QAAQ;oBACJ,aAAa;gBACjB;YACJ;YAEA,6BAA6B;YAC7B,MAAM,OAAO,UAAU,YAAY,CAAC,EAAE,EAAE,SAAS,OAAO,CAAC,EAAE,EAAE,QAAQ;YACrE,MAAM,SAAS,KAAK,KAAK,CAAC;YAC1B,uBAAuB;YACvB,OAAO;QACX,EAAE,OAAO,OAAO;YACZ,QAAQ,KAAK,CAAC,6BAA6B;YAC3C,OAAO;QACX;IACJ;AACJ","debugId":null}},
    {"offset": {"line": 288, "column": 0}, "map": {"version":3,"sources":["file:///Users/Alex/Documents/VSCode/bytecountai/bytecountai/src/app/components/utilities/spinner.tsx"],"sourcesContent":["import React from \"react\";\n\nexport default function Spinner() {\n    return (\n        <div className=\"flex items-center justify-center w-full h-full spinner\">\n            <svg\n                className=\"w-5 h-5 text-gray-500 animate-spin\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n            >\n                <circle\n                    className=\"opacity-25\"\n                    cx=\"12\"\n                    cy=\"12\"\n                    r=\"10\"\n                    stroke=\"currentColor\"\n                    strokeWidth=\"4\"\n                ></circle>\n                <path\n                    className=\"opacity-75\"\n                    fill=\"currentColor\"\n                    d=\"M4 12a8 8 0 018-8v8H4z\"\n                ></path>\n            </svg>\n        </div>\n    );\n}\n\n"],"names":[],"mappings":";;;;;AAEe,SAAS;IACpB,qBACI,8OAAC;QAAI,WAAU;kBACX,cAAA,8OAAC;YACG,WAAU;YACV,OAAM;YACN,MAAK;YACL,SAAQ;;8BAER,8OAAC;oBACG,WAAU;oBACV,IAAG;oBACH,IAAG;oBACH,GAAE;oBACF,QAAO;oBACP,aAAY;;;;;;8BAEhB,8OAAC;oBACG,WAAU;oBACV,MAAK;oBACL,GAAE;;;;;;;;;;;;;;;;;AAKtB","debugId":null}},
    {"offset": {"line": 341, "column": 0}, "map": {"version":3,"sources":["file:///Users/Alex/Documents/VSCode/bytecountai/bytecountai/src/app/components/utilities/button.tsx"],"sourcesContent":["import React from \"react\";\n\ntype ButtonProps = {\n    onClick?: React.MouseEventHandler<HTMLButtonElement>; // Type for onClick\n    disabled?: boolean; // Optional: For disabled state\n    className?: string; // Optional: For additional classes\n    children?: React.ReactNode; // Optional: For button content\n}\n\nconst Button: React.FC<ButtonProps> = ({ onClick, children, className }) => {\n    const baseClasses = \"p-2 m-2 border-2 border-gray-300 cursor-pointer rounded-xl\";\n    return (\n        <button onClick={onClick} className={baseClasses + \" \" + className} type=\"button\">\n            {children}\n        </button>\n    );\n};\n\nexport default Button;"],"names":[],"mappings":";;;;;AASA,MAAM,SAAgC,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE;IACnE,MAAM,cAAc;IACpB,qBACI,8OAAC;QAAO,SAAS;QAAS,WAAW,cAAc,MAAM;QAAW,MAAK;kBACpE;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":["file:///Users/Alex/Documents/VSCode/bytecountai/bytecountai/src/app/components/input.tsx"],"sourcesContent":["\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { POST } from \"../ai/route\";\nimport { z } from \"zod\";\n\nimport Spinner from \"./utilities/spinner\";\nimport Button from \"./utilities/button\";\n\n// Zod schema for Fooditem\nconst Fooditem = z.object({\n    label: z.string(),\n    calories: z.coerce.number(),\n    certainty: z.coerce.number(),\n});\n\ntype Fooditem = z.infer<typeof Fooditem>;\n\n// * Input component\nexport default function Input() {\n    const [foodString, setFoodString] = useState(\"\");\n    const [mealPad, setMealPad] = useState<Fooditem[]>([]);\n    const [isLoading, setIsLoading] = useState(false);\n\n    // * Build the mealPad from local storage\n    useEffect(() => {\n        const mealPad = JSON.parse(localStorage.getItem(\"mealPad\") as string);\n        if (mealPad === null) {\n            setMealPad([]);\n        } else {\n            setMealPad(mealPad);\n        }\n    }, []);\n    // [] is the dependency array. If you want to run the effect only once, you can pass an empty array [] as the second argument.\n\n    // * Calculate total calories on render\n    const [total, setTotal] = useState(0);\n\n    useEffect(() => {\n        const calculatedTotal = mealPad.reduce((acc, item) => acc + item.calories, 0);\n        setTotal(calculatedTotal);\n        // console.log(\"Total calories:\", calculatedTotal);\n    }, [mealPad]);\n    // Here the dependency array is mealPad, so the effect will run whenever mealPad changes.\n\n    // * Functions\n    // * Send an item to the AI to test\n    async function testInput() {\n        const inputElement = document.getElementById(\"foodInput\") as HTMLInputElement | null;\n        if (inputElement!.value === \"\") {\n            return;\n        }\n\n        setIsLoading(true); // Start loading state\n        const inputValue: string = inputElement!.value;\n        setFoodString(inputValue);\n        inputElement!.value = \"\";\n\n        // Fetch the response from the POST function\n        let response: any;\n        try {\n            response = await POST(inputValue);\n        } catch (error) {\n            console.error(\"Error generating content:\", error);\n            alert(`There was an error - please try again.`);\n            inputElement!.value = foodString;\n            return;\n            // TODO: Centralise client-side error handling\n        }\n        finally {\n            setIsLoading(false); // End loading state and proceed with the rest of the cod\n\n            // Check if the response is an error, invalid or empty, or type it accordingly\n            const responseAsString: string = JSON.stringify(response);\n            if (responseAsString.includes(\"{ invalid }\")) {\n                inputElement!.value = \"\";\n                alert(`The supplied input is not food!`); // A problem with the user being a sicko\n                return;\n                // TODO: Centralise client-side error handling\n            }\n            if (responseAsString.includes(\"{ error }\") || responseAsString === \"\") {\n                alert(`There was an error - please try again.`); // Some other AI call error\n                inputElement!.value = foodString;\n                return;\n            }\n            // Validate the response type with Zod\n            if (!Fooditem.safeParse(response).success) {\n                console.error(\"Invalid response format:\", response);\n                alert(`There was an error - please contact the admin.`); // A problem with the prompt\n                inputElement!.value = foodString;\n                return;\n            }\n\n            // Cast it to Fooditem\n            const validResponse = response as Fooditem;\n\n            // Update the mealPad state with the new food item\n            const mealPadWithNewItem = [...mealPad, validResponse];\n            setMealPadAndSync(mealPadWithNewItem);\n        }\n    }\n\n    // * Edit item in the mealPad\n    // Make the item editable on click\n    async function editItem(event: React.MouseEvent<HTMLDivElement>, index: number) {\n        // Prevent the click event from bubbling up to the li element\n        event.stopPropagation();\n        const div = event.target as HTMLLIElement;\n        let oldValue = div.textContent;\n        div.contentEditable = \"true\";\n        div.focus();\n\n        // Blur event to save the edited item\n        const handleBlur = () => {\n            if (div.textContent === \"\") {\n                div.textContent = oldValue;\n                return\n            }\n            else if (div.textContent === oldValue) {\n                return\n            } else {\n                // Show warning if the user tries to enter a non-numeric value for calories\n                if (div.id === \"foodCal\" && isNaN(parseInt(div.textContent!))) {\n                    alert(\"Calories must be a number\");\n                    div.textContent = oldValue;\n                    return\n                }\n                // Save the edited item\n                const newValue = div.textContent;\n                div.contentEditable = \"false\";\n\n                let newItem = { ...mealPad[index] };\n\n                // switch case for whether its the label or the calories we're editing\n                if (div.id === \"foodName\") {\n                    newItem = { ...mealPad[index], label: newValue! };\n                } else if (div.id === \"foodCal\") {\n                    newItem = { ...mealPad[index], calories: parseInt(newValue!), certainty: -1 };\n                }\n\n                // Replace the item at the index with the new item\n                const mealPadWithEditedItem = [...mealPad];\n                mealPadWithEditedItem.splice(index, 1, newItem);\n                setMealPadAndSync(mealPadWithEditedItem);\n            };\n            // Remove the blur event listener to prevent memory leaks\n            div.removeEventListener(\"blur\", handleBlur);\n            div.removeEventListener(\"keydown\", handleBlur);\n\n        };\n        // Add the blur event listener to the div\n        div.addEventListener(\"blur\", handleBlur);\n        // Add the keydown event listener to the div\n        div.addEventListener(\"keydown\", (event) => {\n            if (event.key === \"Enter\") {\n                event.preventDefault();\n                handleBlur();\n            }\n        }\n        );\n    }\n\n\n    // * Clear entire mealPad\n    async function clearMealPad() {\n        alert(\"Are you sure you want to clear all items?\");\n        setMealPadAndSync([]);\n    }\n\n\n    // * Delete items from mealPad\n    async function removeItem(itemId: number, prevMealPad: Fooditem[] = mealPad) {\n        setMealPadAndSync(prevMealPad.filter((_: Fooditem, index: number) => index !== itemId))\n    }\n\n    // * Update the mealPad state and sync with local storage\n    function setMealPadAndSync(mealPad: Fooditem[]) {\n        setMealPad(mealPad);\n        localStorage.setItem(\"mealPad\", JSON.stringify(mealPad));\n    }\n\n    // TODO: Post to day of eating/DB\n    // const mealCommit = {\n    // mealLabel: meallabel,\n    // userId: userId,\n    // date: date,\n    // mealContent: mealPad };\n\n    // Post this to my server component\n    // setMealPadAndSync([]]);\n    // The server component will then post this to the DB\n    // If the DB post fails, return the mealPad, local storage and DOM to its previous state\n\n\n    return (\n        <div className=\"flex flex-col w-full p-2\">\n            <input className=\"w-full p-2 mb-2 text-gray-800 bg-gray-400 rounded-lg\"\n                // TODO: Add ternary for className for loading state (disabled: psuedoselector doesn't work)\n                {...isLoading ? { placeholder: \"Fetching...\" } : { placeholder: \"Enter food item\" }}\n                // onChange={(event) => setFoodString(event.target.value)}\n                onKeyDown={(event) => {\n                    if (event.key === \"Enter\") {\n                        event.preventDefault();\n                        testInput();\n                    }\n                }}\n                // onBlur={(event) => {\n                //     const inputElement = event.target as HTMLInputElement;\n                //     if (inputElement.value === \"\") {\n                //         inputElement.value = foodString;\n                //         inputElement.placeholder = \"Enter food item\";\n                //     }\n                // }}\n                autoComplete=\"on\"\n                autoCorrect=\"on\"\n                autoCapitalize=\"sentences\"\n                spellCheck=\"true\"\n                autoFocus\n                autoSave=\"on\"\n                type=\"text\"\n                id=\"foodInput\"\n                disabled={isLoading}\n            />\n            <div className=\"flex gap-0\">\n                <Button className=\"grow\" onClick={testInput} disabled={isLoading}>{isLoading ? <Spinner /> : \"Add\"}</Button>\n                <Button className=\"grow\" onClick={clearMealPad}>Clear all</Button>\n            </div>\n            <ul id=\"mealPadUl\" className=\"px-2\">\n                {mealPad.map((item, index) => (\n                    <li key={index} className=\"flex items-center justify-between p-2 border-b-2 border-gray-300\">\n                        <div className=\"flex justify-between grow\">\n                            <div onClick={(event) => editItem(event, index)} plaintext-only=\"true\" id=\"foodName\" className=\"grow\">{item.label}</div>\n                            <div className=\"flex\">\n                                <div onClick={(event) => editItem(event, index)} plaintext-only=\"true\" id=\"foodCal\">{item.calories}</div>\n                                <div className=\"text-sm\">&nbsp;kcal</div>\n                            </div>\n                        </div>\n                        <div className=\"relative group\">\n                            <div className=\"w-[2rem]\">\n                                <div className={item.certainty === -1 ? \"hidden\" :\n                                    item.certainty <= 0.4 ? \"text-red-500\" :\n                                        item.certainty > 0.4 && item.certainty <= 0.7 ? \"text-yellow-500\" :\n                                            \"text-green-500\"}>\n                                    <svg height={32} width={32} viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><g strokeWidth=\"0\"></g><g strokeLinecap=\"round\" strokeLinejoin=\"round\"></g><g> <path d=\"M12 9.5C13.3807 9.5 14.5 10.6193 14.5 12C14.5 13.3807 13.3807 14.5 12 14.5C10.6193 14.5 9.5 13.3807 9.5 12C9.5 10.6193 10.6193 9.5 12 9.5Z\" fill=\"currentColor\"></path> </g></svg>\n                                </div>\n                            </div>\n                            <div className=\"absolute w-[200px] hidden p-1 text-center bg-gray-400 rounded-full text-md top-2 group-hover:block\">{item.certainty < 0.4 ? \"Adding weight/quantity, brand or preparation method can improve accuracy \" : \"Certainty: \" + item.certainty}\n                            </div>\n                        </div>\n                        <Button onClick={() => removeItem(index)}>Remove</Button>\n                    </li>\n                ))\n                }\n            </ul >\n            <div className=\"flex justify-between p-2\">\n                <Button>Commit to day</Button>\n                <div>Total: {total}</div>\n            </div>\n        </div >\n    );\n}"],"names":[],"mappings":"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","debugId":null}}]
}